<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
</script>

<style>
    body {
        width: 100vw;
        margin: 0px;
        padding: 0px;
        font-family: Arial, Helvetica, sans-serif;
    }

    nav {
        width: 100vw;
        height: 50px;
        background-color: black;
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    button {
        background-color: transparent;
        color: white;
        font-size: 20px;
        border: 0px;
    }

    a {
        margin-right: 10px;
    }

    #logout {
        background-color: red;
        padding: 10px;
        border-radius: 5px;
    }

    nav>div {
        display: flex;
        padding: 10px;
        align-items: center;
    }

    div.img{
        display: flex;
        justify-content: center;
        margin-top:100px;
    }

    img{
        width:200px;
        height:200px;
        border: 2px solid;
        border-radius: 100px;
    }

    #pic{
        color:white;
        padding: 10px;
        background-color: blue;
    }


.fileupload{
    display: none;
}
.changepic{
    display: flex;
    justify-content: center;
}
</style>

<body>
    <nav>
        <h1>DoctorProfile</h1>
        <div>
            <a href="/doctor/dhome"><button>Home</button></a>
            <button id="logout" onclick="logout()">logout</button>
        </div>
    </nav>


    <div class="img">
<label for="changeimage"><img src=<%=pic%> alt=""></label>
<input type="file" id="changeimage" class="fileupload">



    </div>
    <div class="changepic"><button onclick="upload()" id="pic">Change pic</button></div>
    
</body>

<script>
    async function decode() {
        try {
            const response = await fetch('/doctor/getemail', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${document.cookie.split('=')[1]}`,
                    'who': 'doctor'
                },
                credentials: 'include'
            });
            const msg = await response.json();
            console.log(msg.details);
            return msg.details;
        } catch (error) {
            console.log(error);
        }
    }

    async function dbupload(url){
console.log(url)
        const response=await fetch('/doctor/dbupload',{
            method:'POST',
            headers: {
                'Content-Type': 'application/json' // Ensure you're sending JSON data
            },
            body: JSON.stringify({
                'url': url // Include the 'url' property in the body
            })
        })
        const msg=await response.json()
        return msg;
    }

    async function out() {
        const response = await fetch('/doctor/logout', {
            method: 'POST'
        });
        const msg = await response.json();
        return msg;
    }

    async function logout() {
        try {

            // Then call decode() to get doctor details
            const doctorDetails = await decode();
            console.log(doctorDetails.Username)
            // First call out() and wait for it to finish
            const logoutResponse = await out();
          


            // Emit offline event
            socket.emit('offline', { name: doctorDetails.Username });
            window.location.href="/doctor/login?alert=You have succesfully LOGGED OUT!!"
        } catch (error) {
            console.log(error);
        }
    }


async function cloudname(){

    const response=await fetch('/doctor/uploadprofile',{
        method:'GET'
    })
    const reply=await response.json()
    return reply.cloudname
}

    async function upload() {
            const fileInput = document.getElementsByClassName('fileupload')[0];
            const file = fileInput.files[0]; // Get the first file selected
            
            if (!file) {
                alert("Please select a file first!");
                return;
            }

            const formData = new FormData();
            formData.append('file', file); // Append the file to the form data
            formData.append('upload_preset','g2rsi4nz' ); // Append the upload preset
            formData.append("quality", "100");
            console.log("at cloudname function waiting")
            const result=await cloudname()
            .then(async(result)=>{
                try {
                    console.log(result)
                
                const response = await fetch(`https://api.cloudinary.com/v1_1/${result}/image/upload`, {
                    method: 'POST',
                    body: formData, // Form data to send (file + preset)
                });
                const res=await response.json()


                // Handle response from Cloudinary
                if (res.secure_url) {
                    console.log('File uploaded successfully:', res.secure_url);
                    alert('File uploaded successfully!');
                    const ele=document.getElementsByTagName('img')[0]
                    ele.src=res.secure_url
                    const r=await dbupload(res.secure_url)
                    .then((r)=>{
                        console.log("uploaded to db succesfully")
                    })
                } else {
                    console.error('Error uploading file:', res);
                    alert('Error uploading file');
                }

            } catch (error) {
                console.error('Error uploading file:', error);
                alert('Error uploading file');
            }
            })
            .catch(error=>{
                console.log(error)
            })
           
        }

  
</script>

</html>