<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>dhome</title>

</head>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();</script>


<style>
    button {
        padding: 10px;
        background-color: black;
        color: white;
        margin: 5px;

    }

    div {
        width: 100vw;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: antiquewhite;
    }

    body {
        font-size: 20px;
        color: black;
    }

    p {
        padding: 30px;
        border: 1px solid black;
        border-radius: 5px;
    }

    em{
        display:none;
    }
    span {
        color: blue;
    }
    body{
        width:100vw;
        margin:0px;
        padding:0px;
        font-family: Arial, Helvetica, sans-serif;
       
    }
        nav{
        width:100vw;
        height:50px;
        background-color: black;
        color:white;
        display: flex;
        align-items: center;
        justify-content: space-between;
        }
    
        button{
           background-color: transparent; 
           color:white;
           font-size: 20px;
           border:0px;
        
        }
        form{
            width: 100px;
            background-color: black;
        }
        
</style>

<body>
   
    
    
    
    
        <nav>  <h1>Doctorreviews</h1><span class="roomid"></span>
            <a href="/doctor/dhome/profile"><button>profile</button></a>
            <a href="/doctor/dhome/reviews"><button>reviews</button></a></nav>

    <div class="patientlist">

        <h1>Patients</h1>
        <% if (data && data.length > 0) { %>
            <% data.forEach(patientdetails => { %>
              <p>
                <span class="name"><%= patientdetails.pname %></span>
                <em class="pid"><%= patientdetails.psocketid %></em>
                <button class="Accept" onclick="accept(this)">Accept</button>
                <button class="Reject" onclick="reject(this)">Reject</button>
              </p>
            <% }) %>
          <% } else { %>
            <p>No pending requests available.</p>
          <% } %>
          
        



    </div>
</body>

<script>

    let doctordetails=null;

    async function decode() {
        try {
            const response = await fetch('/doctor/getemail', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${document.cookie.split('=')[1]}`,
                    'who':'doctor'
                },
                credentials: 'include'
            })
            const msg = await response.json()
            console.log(msg.details)
            doctordetails=msg.details
            
            socket.emit('register',{name:"doctor",email:doctordetails.email})
            return doctordetails;

        } catch (error) {
            console.log(error)

        }
    }

    decode()
    //fetch email using accesstoken
    

    


    const ele = document.getElementsByClassName('patientlist')[0]
    const children=ele.getElementsByTagName('p')

    
socket.on('patient', (patientdetails) => {
    console.log(patientdetails);

    // Get the parent element where patients are listed
   
    // Check if "No pending requests" message exists
    const noRequestsMessage = ele.querySelector('p');
    if (noRequestsMessage && noRequestsMessage.textContent === "No pending requests available.") {
        noRequestsMessage.remove();  // Remove the "No pending requests" message if there are patients now
    }

    // Check if the patient already exists in the list
    let patientExists = false;
    for (let i = 0; i < children.length; i++) {
        if (children[i].getElementsByTagName('span')[0].textContent === patientdetails.pname) {
            patientExists = true;
            children[i].remove(); // Remove the existing entry for this patient (if any)
            break;  // Exit loop once found and removed
        }
    }

    // Only add the patient if they are not already in the list
    if (!patientExists) {
        const para = document.createElement('p');
        para.innerHTML = `
            <span class="name">${patientdetails.pname}</span>
            <em class="pid">${patientdetails.pid}</em>
            <button class="Accept" onclick="accept(this)">Accept</button>
            <button class="Reject" onclick="reject(this)">Reject</button>
        `;
        ele.appendChild(para);  // Append the new patient to the list
    }
});




    async function pendingrequests(data,docname){



        const response=await fetch('/doctor/pendingrequests',{
            method:'POST',
            headers: {
    'Content-Type': 'application/json' // or other content types
    // Add other headers if necessary
  },
            body:JSON.stringify({
                "data":data,
                "docname":docname
            })
        })
        const msg=await response.json()
        console.log(msg)
        return msg.message;
    }
    async function accept(a) {


        const btn = a.parentElement.getElementsByTagName('button')
        console.log("accepted")
        const pid=a.parentElement.getElementsByTagName('em')[0].textContent

        if(btn[0].textContent==="Accept")
        {
        btn[1].style.display = "none"
        btn[0].textContent = "Creating Room..."
        //fetch roomid from the db for that doctor        
        const response=await decode()
        var roomid=response.roomid
        var usy=response.Username
        console.log(usy,".....................................................")

        console.log(roomid)
        socket.emit('room', {
            roomid: roomid,
            pid: pid,
            docname:usy
        }, (response) => {

            btn[0].textContent="Join"
            btn[0].style.backgroundColor="green"
            document.getElementsByClassName('roomid')[0].textContent=roomid
           

        })
    }
    else{
        const roomid=document.getElementsByClassName('roomid')[0].textContent
        const pending = Array.from(a.parentElement.parentElement.getElementsByTagName('p')).filter(p => p !== a.parentElement);  // Exclude the clicked <p> element
        let data=[]
for(let i=0;i<pending.length;i++){
data.push({
    pname:pending[i].getElementsByClassName('name')[0].textContent,
    psocketid:pending[i].getElementsByClassName('pid')[0].textContent,
    pcondition:null
})

}
console.log(data)
        const res=await decode()
        console.log("before sending .....")
        console.log(res.Username)
       const response= await pendingrequests(data,res.Username)
    //    note here......
       .then((response)=>{
        window.location.href=`/room/${roomid}`})
       .catch(error=>{
            console.log(error)
        })
    }
    }

    async function reject(r) {
        const pid = r.parentElement.getElementsByTagName('em')[0].textContent
        //fetch did from the database
        console.log("inside rejection",pid)
            
            decode().then(()=>{socket.emit('reject', {
            pid: pid,
            docname: doctordetails.Username
        })})
        r.parentElement.remove()

        
    }


    document.querySelector('#logout').addEventListener('click',()=>{
        socket.emit()
    })
</script>
<script src="/stopreload.js"></script>
<script src="/sendalert.js"></script>
</html>